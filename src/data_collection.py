# src/data_collection.py
import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import os
from typing import Dict, List, Optional

class BinanceDataCollector:
    def __init__(self):
        self.base_url = "https://api.binance.com/api/v3"
        self.cache_dir = "data/raw_data"
        os.makedirs(self.cache_dir, exist_ok=True)
        
    def _get_cache_path(self, symbol: str, interval: str) -> str:
        """T·∫°o ƒë∆∞·ªùng d·∫´n cache file"""
        return os.path.join(self.cache_dir, f"{symbol}_{interval}.csv")
    
    def _load_from_cache(self, cache_path: str, max_age_minutes: int = 10) -> Optional[pd.DataFrame]:
        """T·∫£i d·ªØ li·ªáu t·ª´ cache n·∫øu c√≤n m·ªõi"""
        if os.path.exists(cache_path):
            file_time = datetime.fromtimestamp(os.path.getmtime(cache_path))
            if datetime.now() - file_time < timedelta(minutes=max_age_minutes):
                try:
                    df = pd.read_csv(cache_path, parse_dates=['open_time', 'close_time'])
                    print(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ cache: {cache_path}")
                    return df
                except Exception as e:
                    print(f"‚ùå L·ªói ƒë·ªçc cache: {e}")
        return None
    
    def _save_to_cache(self, df: pd.DataFrame, cache_path: str):
        """L∆∞u d·ªØ li·ªáu v√†o cache"""
        try:
            df.to_csv(cache_path, index=False)
            print(f"üíæ ƒê√£ l∆∞u cache: {cache_path}")
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u cache: {e}")
    
    def get_klines_data(self, symbol: str = 'BTCUSDT', interval: str = '1d', 
                       limit: int = 1000, use_cache: bool = True) -> Optional[pd.DataFrame]:
        """L·∫•y d·ªØ li·ªáu gi√° t·ª´ Binance API v·ªõi caching v√† retry mechanism"""
        
        # Ki·ªÉm tra cache
        cache_path = self._get_cache_path(symbol, interval)
        if use_cache:
            cached_data = self._load_from_cache(cache_path)
            if cached_data is not None:
                return cached_data.tail(limit) if len(cached_data) > limit else cached_data
        
        # Retry mechanism
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"üåê L·∫ßn th·ª≠ {attempt + 1}: ƒêang l·∫•y d·ªØ li·ªáu {symbol} t·ª´ Binance...")
                url = f"{self.base_url}/klines"
                params = {
                    'symbol': symbol,
                    'interval': interval,
                    'limit': min(limit, 500)  # Gi·∫£m limit ƒë·ªÉ tƒÉng success rate
                }
                
                # TƒÉng timeout v√† th√™m headers
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                
                response = requests.get(
                    url, 
                    params=params, 
                    timeout=15,  # TƒÉng timeout
                    headers=headers
                )
                response.raise_for_status()
                data = response.json()
                
                # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
                df = pd.DataFrame(data, columns=[
                    'open_time', 'open', 'high', 'low', 'close', 'volume',
                    'close_time', 'quote_asset_volume', 'number_of_trades',
                    'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
                ])
                
                # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
                numeric_columns = ['open', 'high', 'low', 'close', 'volume', 
                                 'quote_asset_volume', 'number_of_trades',
                                 'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume']
                
                for col in numeric_columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                    
                # Chuy·ªÉn ƒë·ªïi timestamp
                df['open_time'] = pd.to_datetime(df['open_time'], unit='ms')
                df['close_time'] = pd.to_datetime(df['close_time'], unit='ms')
                
                # Th√™m c√°c c·ªôt b·ªï sung
                df['symbol'] = symbol
                df['interval'] = interval
                
                # L∆∞u cache
                if use_cache:
                    self._save_to_cache(df, cache_path)
                
                print(f"‚úÖ TH√ÄNH C√îNG: ƒê√£ l·∫•y {len(df)} records TH·∫¨T cho {symbol}")
                return df.tail(limit) if len(df) > limit else df
                
            except requests.exceptions.Timeout:
                print(f"‚è∞ Timeout l·∫ßn {attempt + 1}, th·ª≠ l·∫°i sau 2 gi√¢y...")
                time.sleep(2)
            except requests.exceptions.ConnectionError as e:
                print(f"üîå L·ªói k·∫øt n·ªëi l·∫ßn {attempt + 1}: {e}")
                time.sleep(2)
            except requests.exceptions.HTTPError as e:
                print(f"üåê L·ªói HTTP {e.response.status_code}: {e}")
                if e.response.status_code == 429:  # Rate limit
                    print("üö´ Rate limit, ƒë·ª£i 5 gi√¢y...")
                    time.sleep(5)
                    continue
                break
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
                break
        
        print(f"üö® KH√îNG TH·ªÇ k·∫øt n·ªëi Binance sau {max_retries} l·∫ßn th·ª≠")
        
        # Th·ª≠ t·∫£i t·ª´ cache c≈© n·∫øu c√≥
        cached_data = self._load_from_cache(cache_path, max_age_minutes=1440)  # 24h
        if cached_data is not None:
            print("üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu cache c≈©")
            return cached_data.tail(limit) if len(cached_data) > limit else cached_data
        
        return None
    
    def get_multiple_symbols(self, symbols: List[str] = None, 
                           interval: str = '1d', limit: int = 500) -> Dict[str, pd.DataFrame]:
        """L·∫•y d·ªØ li·ªáu nhi·ªÅu coin c√πng l√∫c"""
        if symbols is None:
            symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT']  # Gi·∫£m s·ªë l∆∞·ª£ng
        
        all_data = {}
        
        for symbol in symbols:
            print(f"üìä ƒêang l·∫•y d·ªØ li·ªáu TH·∫¨T cho {symbol}...")
            df = self.get_klines_data(symbol=symbol, interval=interval, limit=min(limit, 200))
            if df is not None and not df.empty:
                all_data[symbol] = df
                print(f"‚úÖ ƒê√£ l·∫•y d·ªØ li·ªáu TH·∫¨T th√†nh c√¥ng cho {symbol}")
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu TH·∫¨T cho {symbol}")
            time.sleep(1)  # TƒÉng delay ƒë·ªÉ tr√°nh rate limit
            
        return all_data
    
    def get_24h_ticker(self, top_n: int = 50) -> Optional[pd.DataFrame]:
        """L·∫•y th√¥ng tin 24h cho c√°c coin"""
        try:
            url = f"{self.base_url}/ticker/24hr"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            # L·ªçc c√°c c·∫∑p USDT
            df = pd.DataFrame(data)
            df = df[df['symbol'].str.endswith('USDT')]
            
            # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
            numeric_cols = ['volume', 'quoteVolume', 'priceChange', 'priceChangePercent',
                          'weightedAvgPrice', 'prevClosePrice', 'lastPrice', 'lastQty',
                          'bidPrice', 'askPrice', 'openPrice', 'highPrice', 'lowPrice']
            
            for col in numeric_cols:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # S·∫Øp x·∫øp theo volume
            df = df.nlargest(top_n, 'quoteVolume')
            df['rank'] = range(1, len(df) + 1)
            
            return df
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y ticker 24h: {e}")
            return None
    
    def get_exchange_info(self) -> Optional[Dict]:
        """L·∫•y th√¥ng tin v·ªÅ c√°c symbol ƒë∆∞·ª£c h·ªó tr·ª£"""
        try:
            url = f"{self.base_url}/exchangeInfo"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y exchange info: {e}")
            return None